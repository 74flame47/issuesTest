Documentation:

Creating a react app:
    npm init react-app myapp
    This will create the app enviroment for me, next I will have to navigate to it
        in the terminal.

    ***[I notice an error keep popping up when doing this "Unexpected end of JSON input while parsing near '...nt-webpack-plugin":"0'"
    I googled the solution to this and it goes as follows {npm cache clean --force}. I don't know why it works but it works...]***



Git Notes:
    If you already have a project prepared you have to ensure a few things.
        1.It is using a package manager npm. You can do this by running {npm init}
        2.Git also have to be on it as well. You can do this by running {git init}
            a.Make sure that you add the "node_modules" folder is added to {.gitignore}
                (Just add the folder name within the file.)
            b.If you don't have a .gitignore, you can create one within Visual Studio Code. 
                (Just create a file and name it {.gitignore})
                infor here => https://help.github.com/en/github/using-git/ignoring-files
                =>https://gist.github.com/octocat/9257657

    Once you've ensured that these are present and functioning you can move on.

    Next you have to create a git respository on your git account.

    Once that is complete:
        
        
        //Follow the rest of these instructions//
        https://kbroman.org/github_tutorial/pages/init.html




DNS Setup
    Once I bought the domain name from a DNS provider, they will give you DNS
        records for that domain name. My DNS provider is godaddy.
    I then headed over to netlify and added a domain name to my site. I copied
        their link they gave me for the site and added it to my DNS records @godaddy.
        "CNAME www @" to "CNAME www blah-blah-blah.netlify.app"
    The time frame for this is usually 24 hours but it went up in 5mins for me.















    To use NODE:
    1. Install it from the browser.
    2. Navigate to the project folder in the terminal.
    3. Run node by typing {node} in the terminal.
        This will allow you to run javascript files using the terminal.
    4. To run a script file, ensure that the terminal is in the location of
        the server.js, then inside of the terminal type {node filename.js}



Install package.json by { npm init}




How to install nodemon:
    1. {npm install nodemon --save-dev}  This will save nodemon as a developer dependecy.
        Meaning, that when it's time to build the app, nodemon wont be considered as a 
        dependecy and be added into the package.
        Also, you need to add nodemon to the scripts "start". So it will look like this:

            "start": "nodemon servername.js"
        
        Nodemon allows the server to stay active listening to requets.
        





NODE INSTALLATION & USAGE

How to install express:
    1. {npm install express}   This automaticly will be consider as a devdependency.



EXPRESS SERVER

1.The first thing you do when creating a server is to create an express var and store the 
require function targeting express.

    const express = require('express');

2.Next, you have to create var "app" and call the express var you just made.

    const app = express();

3.Lastly, you have to call the app function now and assign a listerner to it for the 
port you want node to listen to for requests.


Because you have this server now, you have to create some logic for the server telling it what
to do. So what will happen is the Browser will send requests to the server using the url.
The server will see the url and if that link is on the root directory, then you can define 
specific logic that happens only on that page. The server then RESPONDS with sending code 
or files back to the browser.

You can use:
.get()
.post()
.delete()


app.get('/', (req, res) => {
    res.send("<h1>This can be html code or reqular text.</h1>");
})

The above code is broken down as follows:

    app.get()- is a function that handles the communication request if the conditions are right.
    The first argument '/', is used to determine where the request is coming from on the site.
        '/' means that it is coming off the root directory. If it were something like this 
        '/profile', then the request would have come from the profile page or to the profile page.

    (req, res)- These are the perameters of the following arrow function. It receives 2 inputs,
    res, aka request and res, aka response. These are used to represent the request and response
    syntax.
    Within the {} you write the desired code. First you start with whether it will be a reques or
    a response, next you access it's member opporator and send something back or receive something.

When sending back to the browser, you can either send javascript objects or regular html.



Lastly you need to add a port listener so that the server will know what port to pay attention too
    
    app.listen(3001);







INSTALLING EXPRESS ON UBUNTU SERVER
    https://www.vultr.com/docs/installing-node-js-and-express
    

    When I first did this I got an error, and that was because even tho I did what they asked of me,
    the installer didn't add node_modules...so to fix this, I navigated inside my server folder and 
    {npm install}. This added the node_modules folder and dependencies I needed.
    https://stackoverflow.com/questions/9023672/how-do-i-resolve-cannot-find-module-error-using-node-js


Below is how you will install users on your server.
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04





Here's the link for catching errors for promises:
https://thecodebarbarian.com/unhandled-promise-rejections-in-node.js.html







CONNECTING TO THE SERVER:
    You need to open up the putty software. This will connect you to the server.
        -Once open, add the IP Address of the server within the ip input then press "open"
        If you need this information, just go to your server on vultr and get the information.
        -This will open up the putty terminal, here you will be prompted to add in the user and
        password. Just get this information from the server as well. When inputing the password,
        it will be hidden, once you copy the password, right click within the terminal and 
        the password will be added.
        -Next type "dir" to show where you are within the terminal, then navigate into the "portfolio_server"
        folder using "cd portfolio_server"
        -Within the "portfolio_server" type "npm start". This will start the server within the terminal.
        Now the server is active to listen to the requests that are coming in.

    If you try to access the server without it running, then the server will not respond.




    My concern is how do I leave the server running...
    Here's something the maybe can help... https://coderrocketfuel.com/article/deploy-a-node-js-application-to-a-vultr-server-with-https

    I found a better alternative:
        https://www.howtogeek.com/howto/ubuntu/keep-your-ssh-session-running-when-you-disconnect/
        After installing it on my server it gave me some errors that I appearently have to manually fix.
        Here's the link: https://gonpm.me/audit-guide

        To use screen, within the profile_server folder you can just type in the commands with out the server running.
        https://www.howtogeek.com/howto/ubuntu/keep-your-ssh-session-running-when-you-disconnect/




NOT ONLY THAT BUT I FOUND A NEW WAY TO CONNECT TO THE SERVER THROUGH SSH WITHOUT USING PUTTY!
    I downloaded the Visual Studio Code extention "Remote - SSH"
    Once installed, click on the button to the bottom left of the Visual Studio Code window...it's usually colored.
    This will open a new window showing you all the servers you are currently connected to. Click on the "+" icon in
        the tab and add in the user for the server and the ip address: ssh root@149.28.97.79 -A
    The next input will be the password for the server.
    Then select where the project files where you server is located, then boom you are in!

    Here's the refference:
    https://www.youtube.com/watch?v=7kum46SFIaY&t=110s
    https://www.youtube.com/watch?v=QW70p8lLE4A
    
    The offical link
    https://code.visualstudio.com/docs/remote/ssh#_getting-started
    
    This link is for you when you want to develop more security for the connection:
    https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication
    


If you already set this up before:
    Press F1
    type "Remote-SSH: Connect to host..."
    Here you can enter your user name for access to the server, and add the server ip address.
        eg: username@serverIP
    Then add the password of that server.
    Next follow the prompts...sorry :)










Why the server have to run on a port and how to get it to run without one:













DNS Transfer using godaddy and vultr:
    I currently purchased a domain name from Godaddy, and I have a server running on vultr.
    As it stands Godaddy is managing the domain name for me, but what I want to do is transfer it to vultr DNS.
    To do this you have to copy the name server information from vultr and add it into the name server for godaddy.
    You will have to go to the advance options after you've click the  edit button for the name server.
    Just in case, I keep a copy of the information just incase, so I can revert if need be.

    Here is the information for the name server for vultr
    https://www.vultr.com/docs/introduction-to-vultr-dns

    https://www.youtube.com/watch?v=Nr9bGEAVaCU

    Next you will have to connect the domain to the server.
        You can do this by going to your product page in the vultr website.
        Open up the DNS link
        Click on the add domain button
        Add in the domain name and the server ip address you want to connect it to.
        {This will take up to a day so you have to wait for it to be done.}





Why the server have to run on a port and how to get it to run without one:
https://stackoverflow.com/questions/59705312/http-server-to-access-the-application-without-port

By default, the browser runs on port 80, for http. For https, it's port 443. So just add app.listen(80) for 
https and app.listen(443).
So conclusion, just listen to the default port.


How to set up the certbot & Encrypt for Express:
https://flaviocopes.com/express-letsencrypt-ssl/
https://itnext.io/node-express-letsencrypt-generate-a-free-ssl-certificate-and-run-an-https-server-in-5-minutes-a730fbe528ca




I'm running into DNS errors, so now I'm going to see if I can just display the site from my server.
https://techwombat.com/how-to-point-domain-name-to-vultr-vps/

Here's my soloution, why don't I just serve the site files directly to the server. So the server will give me the files for 
the site.

































    POSTGRESQL//////////////////////////////////////////////////

        Install Postgresql on Unbuntu server:
        https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-20-04





        In the terminal, type : sudo -i -u postgres 
        Next type in : psql 
        Now you are connected to the database

        CREATE DATABASE desiredname;
        DROP DATABASE [IF EXISTS] database_name;


        \q => quit
        \l => Shows the database
        \c => database name
        \d => list of tables within the current database

        ctl + d => This quits the postgres command line, taking you to the root.


        Here is the link:
        https://phoenixnap.com/kb/how-to-connect-postgresql-database-command-line




        Postgress Connection error:
        https://www.liquidweb.com/kb/what-is-the-default-password-for-postgresql/
        https://www.liquidweb.com/kb/change-a-password-for-postgresql-on-linux-via-command-line/
        http://knexjs.org/#knexfile => Go to Migrations section to knexfile.js

        The issue was that I was trying to make a connection with out having the user defined and password.
        Because there was no password for postgres user, I had to add one. Once I added it, it worked!!!





Favicon Icons Update:
    Inside the public folder is where your favicon located within the react folder.
    To replace it, you will need to convert your image to a favicon through https://favicon.io/favicon-converter/.
    Then rename the icon files to replace the ones that's already within the public folder if you are using 
        create react app.
    Then that's it, upload your site and refresh the page.






Here's a DATEFORMAT library:

npm install dateformat
Then write your requirement:

var dateFormat = require('dateformat');
Then bind the value:

var day=dateFormat(new Date(), "yyyy-mm-dd h:MM:ss");

https://github.com/felixge/node-dateformat











How to have your server host your react project:
    +Run "npm run build" for your react app
    +copy the files out of the build folder and paste them inside of the 
        public folder of your server. Becareful what you change because
        the links are sensitive according to the structure of the build folder.








How to add images to the website:
https://www.youtube.com/watch?v=Rw_QeJLnCK4&t=1543s